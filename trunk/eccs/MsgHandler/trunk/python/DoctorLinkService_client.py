##################################################
# file: DoctorLinkService_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /usr/local/bin/wsdl2py --complexType ws.xml
# 
##################################################

from DoctorLinkService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class DoctorLinkServiceLocator:
    #DoctorLinkPort_address = "http://10.32.148.253:81/TriageWS/DoctorLinkService"
    DoctorLinkPort_address = "http://127.0.0.1:81/TriageWS/DoctorLinkService"
    def getDoctorLinkPortAddress(self):
        return DoctorLinkServiceLocator.DoctorLinkPort_address
    def getDoctorLinkPort(self, url=None, **kw):
        return DoctorLinkPortBindingSOAP(url or DoctorLinkServiceLocator.DoctorLinkPort_address, **kw)

# Methods
class DoctorLinkPortBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: push_msg
    def push_msg(self, request, **kw):
        if isinstance(request, push_msg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        print self.binding.ReceiveRaw()
        response = self.binding.Receive(push_msgResponse.typecode)
        return response

    # op: msg_is_sent
    def msg_is_sent(self, request, **kw):
        if isinstance(request, msg_is_sent) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(msg_is_sentResponse.typecode)
        return response

push_msg = GED("http://web/", "push_msg").pyclass

push_msgResponse = GED("http://web/", "push_msgResponse").pyclass

msg_is_sent = GED("http://web/", "msg_is_sent").pyclass

msg_is_sentResponse = GED("http://web/", "msg_is_sentResponse").pyclass
