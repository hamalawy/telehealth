#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.3 on Tue Mar 17 10:11:03 2009

"""
Project LifeLink: rxpanel module

Contains the panel for DAQ and display of the samples from
The biomedical modules.

Authors: Julius Miguel J. Broma
         Arlan Roie A. Santos
         Luis G. Sison, PhD
         ------------------------------------------------
         Instrumentation, Robotics and Control Laboratory
         University of the Philippines - Diliman
         ------------------------------------------------
         March 2009
"""

import wx

import threading
import acquire
import ecgplotter
import rxsensor
import referpanel
import makeEDF

from wx import CallAfter

class MyPanel(wx.Panel):
    def __init__(self, parent, *args, **kwds):
        # begin wxGlade: MyPanel1.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.static_line_2 = wx.StaticLine(self, -1)
        
        self.StartStop_Button = wx.BitmapButton(self, -1, wx.Bitmap("Icons/PlayButton.png", wx.BITMAP_TYPE_ANY))
        self.StartStop_Label = wx.StaticText(self, -1, "Start")
        self.static_line_3 = wx.StaticLine(self, -1, style=wx.LI_VERTICAL)
        
        self.Refer_Button = wx.BitmapButton(self, -1, wx.Bitmap("Icons/Refer.png", wx.BITMAP_TYPE_ANY))
        self.Refer_Label = wx.StaticText(self, -1, "Refer")
        self.staticline1 = wx.StaticLine(self, -1)
        
        self.nodeplacement_Bitmap = wx.StaticBitmap(self, -1, wx.Bitmap("Icons/NodePlacement.png", wx.BITMAP_TYPE_ANY), style=wx.SIMPLE_BORDER)
        
        self.calibsignal_Bitmap = wx.StaticBitmap(self, -1, wx.Bitmap("Icons/CalibrationSignal.png", wx.BITMAP_TYPE_ANY), style=wx.SIMPLE_BORDER)
        self.ecg_label = wx.StaticText(self, -1, "ECG WAVEFORM", style=wx.ALIGN_CENTRE)
        self.static_line_1 = wx.StaticLine(self, -1)
        self.bpNow_Button = wx.Button(self, -1, "N\nO\nW")
        self.bp_label = wx.StaticText(self, -1, "Blood Pressure", style=wx.ALIGN_CENTRE)
        self.bpvalue_label = wx.StaticText(self, -1, "-- / --", style=wx.ALIGN_CENTRE)
        self.bpunit_label = wx.StaticText(self, -1, "mmHg", style=wx.ALIGN_RIGHT)
        self.bpm_label = wx.StaticText(self, -1, "Heart Rate", style=wx.ALIGN_CENTRE)
        self.bpmvalue_label = wx.StaticText(self, -1, "--", style=wx.ALIGN_CENTRE)
        self.bpmunit_label = wx.StaticText(self, -1, "bpm", style=wx.ALIGN_RIGHT)
        self.spo2_label = wx.StaticText(self, -1, "Blood Oxygen Saturation", style=wx.ALIGN_CENTRE)
        self.spo2value_label = wx.StaticText(self, -1, "--", style=wx.ALIGN_CENTRE)
        self.bpmunit_label_copy = wx.StaticText(self, -1, "%SpO2", style=wx.ALIGN_RIGHT)

        # embed ecg plotter
        self.ecgplotter = ecgplotter.Plotter(self)
        self.ecgplotter.canvas.SetSize((520, 350))

        self.parentFrame = parent
        self.acquirelist = []
        self.ecgplotterlist = []
        self.BioSignals = []

        self.clearplot_flag = 0

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.onStartStop, self.StartStop_Button)
        self.Bind(wx.EVT_BUTTON, self.onRefer, self.Refer_Button)
        self.Bind(wx.EVT_BUTTON, self.onBPNow, self.bpNow_Button)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyPanel1.__set_properties
        self.StartStop_Button.SetBackgroundColour(wx.Colour(50, 50, 204))
        self.StartStop_Button.SetToolTipString("Start data acquisition from the biomedical modules")
        self.StartStop_Button.SetSize(self.StartStop_Button.GetBestSize())
        self.StartStop_Label.SetFont(wx.Font(16, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, "Arial"))
        self.Refer_Button.SetToolTipString("Call the Central side and transmit patient's telemetry")
        self.Refer_Button.Enable(False)
        self.Refer_Button.SetSize(self.Refer_Button.GetBestSize())
        self.Refer_Label.SetFont(wx.Font(16, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, "Arial"))
        self.Refer_Label.Enable(False)
        self.staticline1.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.ecg_label.SetMinSize((306, 20))
        self.ecg_label.SetBackgroundColour(wx.Colour(241, 123, 241))
        self.ecg_label.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, 0, "Arial"))
        self.bpNow_Button.SetBackgroundColour(wx.Colour(255, 217, 222))
        self.bpNow_Button.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, 0, "Arial"))
        self.bpNow_Button.SetToolTipString("Get Blood Pressure Now")
        self.bpNow_Button.Enable(True)
        self.bp_label.SetMinSize((60, 30))
        self.bp_label.SetBackgroundColour(wx.Colour(255, 217, 222))
        self.bp_label.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, 0, "Arial"))
        self.bpvalue_label.SetMinSize((60, 40))
        self.bpvalue_label.SetBackgroundColour(wx.Colour(255, 217, 222))
        self.bpvalue_label.SetFont(wx.Font(30, wx.MODERN, wx.NORMAL, wx.BOLD, 0, "Arial"))
        self.bpvalue_label.Enable(False)
        self.bpunit_label.SetMinSize((60, 30))
        self.bpunit_label.SetBackgroundColour(wx.Colour(255, 217, 222))
        self.bpunit_label.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, 0, "Arial"))
        self.bpm_label.SetMinSize((60, 30))
        self.bpm_label.SetBackgroundColour(wx.Colour(226, 255, 180))
        self.bpm_label.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, 0, "Arial"))
        self.bpmvalue_label.SetMinSize((60, 40))
        self.bpmvalue_label.SetBackgroundColour(wx.Colour(226, 255, 180))
        self.bpmvalue_label.SetFont(wx.Font(30, wx.MODERN, wx.NORMAL, wx.BOLD, 0, "Arial"))
        self.bpmvalue_label.Enable(False)
        self.bpmunit_label.SetMinSize((60, 30))
        self.bpmunit_label.SetBackgroundColour(wx.Colour(226, 255, 180))
        self.bpmunit_label.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, 0, "Arial"))
        self.spo2_label.SetMinSize((60, 30))
        self.spo2_label.SetBackgroundColour(wx.Colour(201, 248, 255))
        self.spo2_label.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, 0, "Arial"))
        self.spo2value_label.SetMinSize((60, 40))
        self.spo2value_label.SetBackgroundColour(wx.Colour(201, 248, 255))
        self.spo2value_label.SetFont(wx.Font(30, wx.MODERN, wx.NORMAL, wx.BOLD, 0, "Arial"))
        self.spo2value_label.Enable(False)
        self.bpmunit_label_copy.SetMinSize((60, 30))
        self.bpmunit_label_copy.SetBackgroundColour(wx.Colour(201, 248, 255))
        self.bpmunit_label_copy.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, 0, "Arial"))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyPanel1.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.static_line_2, 0, wx.EXPAND, 0)
        sizer_2.Add(self.StartStop_Button, 0, wx.ALL, 4)
        sizer_2.Add(self.StartStop_Label, 0, wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_2.Add(self.static_line_3, 0, wx.ALL|wx.EXPAND, 4)
        sizer_2.Add(self.Refer_Button, 0, wx.ALL, 4)
        sizer_2.Add(self.Refer_Label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add((20, 20), 1, wx.ALL|wx.EXPAND, 4)
        sizer_1.Add(sizer_2, 0, wx.ALL|wx.EXPAND, 0)
        sizer_1.Add(self.staticline1, 0, wx.ALL|wx.EXPAND, 2)
        sizer_4.Add(self.nodeplacement_Bitmap, 0, wx.ALL|wx.EXPAND, 4)
        sizer_4.Add(self.calibsignal_Bitmap, 1, wx.ALL|wx.EXPAND, 4)
        sizer_3.Add(sizer_4, 0, 0, 0)
        sizer_5.Add(self.ecg_label, 0, wx.ALL|wx.EXPAND, 4)
        # embed ecg plotter
        sizer_5.Add(self.ecgplotter.canvas, 1, wx.LEFT|wx.RIGHT|wx.BOTTOM|wx.EXPAND, 4)
        sizer_3.Add(sizer_5, 5, wx.EXPAND, 0)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_1.Add(self.static_line_1, 0, wx.EXPAND, 0)
        sizer_7.Add(self.bpNow_Button, 1, wx.LEFT|wx.TOP|wx.BOTTOM|wx.EXPAND, 4)
        sizer_8.Add(self.bp_label, 0, wx.BOTTOM|wx.EXPAND, 1)
        sizer_8.Add(self.bpvalue_label, 0, wx.EXPAND, 0)
        sizer_8.Add(self.bpunit_label, 0, wx.EXPAND, 0)
        sizer_7.Add(sizer_8, 4, wx.RIGHT|wx.TOP|wx.BOTTOM|wx.EXPAND, 4)
        sizer_6.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_9.Add(self.bpm_label, 0, wx.BOTTOM|wx.EXPAND, 1)
        sizer_9.Add(self.bpmvalue_label, 0, wx.EXPAND, 0)
        sizer_9.Add(self.bpmunit_label, 0, wx.EXPAND, 0)
        sizer_6.Add(sizer_9, 1, wx.RIGHT|wx.TOP|wx.BOTTOM|wx.EXPAND, 4)
        sizer_10.Add(self.spo2_label, 0, wx.BOTTOM|wx.EXPAND, 1)
        sizer_10.Add(self.spo2value_label, 0, wx.EXPAND, 0)
        sizer_10.Add(self.bpmunit_label_copy, 0, wx.EXPAND, 0)
        sizer_6.Add(sizer_10, 1, wx.RIGHT|wx.TOP|wx.BOTTOM|wx.EXPAND, 4)
        sizer_1.Add(sizer_6, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        # end wxGlade

    def onStartStop(self, event): # wxGlade: MyPanel1.<event_handler>
        """ function for starting and stopping DAQ """

        # do this when Start button is pressed
        if self.StartStop_Label.GetLabel() == "Start":
            if (self.clearplot_flag == 1):
                self.ecgplotter.clearPlot()

            # enable or disable GUI widgets
            self.bpvalue_label.Enable(True)
            self.bpmvalue_label.Enable(True)
            self.spo2value_label.Enable(True)
            self.Refer_Button.Enable(True)
            self.Refer_Label.Enable(True)
            self.bpNow_Button.Enable(False)

            # instantiate rxsensor object
            self.myECG  = rxsensor.ECG(self)
            self.mySPO2 = rxsensor.SPO2(self)
            self.myBP = rxsensor.BP(self)


            # start threads for acquiring samples from the modules
            self.acquirelist.append(acquire.GetThread(self.myECG))
            self.acquirelist.append(acquire.GetThread(self.mySPO2))
            self.acquirelist.append(acquire.GetThread(self.myBP)) 
            for thread in self.acquirelist:
                thread.start()

            # replace the Start Button icon with a Stop Button icon
            self.StartStop_Button.SetBitmapLabel(wx.Bitmap("Icons/StopButton.png",wx.BITMAP_TYPE_ANY))
            # replace the Stop Button tool tip string
            self.StartStop_Button.SetToolTipString("Stop RxBox session")
            # replace the button label with Stop
            self.StartStop_Label.SetLabel("Stop")

            self.clearplot_flag = 1

        # do this when Stop Button is clicked
        else:

            # enable GUI widget
            self.bpNow_Button.Enable(True)
            
            self.myBP.stop_flag = 1
            self.mySPO2.stop_flag = 1

            # stop active threads 
            self.stopThreads()

            # replace the Stop Button icon with a Start Button icon
            self.StartStop_Button.SetBitmapLabel(wx.Bitmap("Icons/PlayButton.png",wx.BITMAP_TYPE_ANY))
            # replace the button label with Start
            self.StartStop_Label.SetLabel("Start")

            # enable or disable GUI widgets
            self.bpNow_Button.Enable(True)
            self.Refer_Button.Enable(False)

    
    def onRefer(self, event): # wxGlade: MyPanel1.<event_handler>
        """ function when Refer Button is clicked """

        # enable or disable GUI widgets
        self.Refer_Button.Enable(False)
        self.Refer_Label.Enable(False)

        # create a modal dialog window
        CreateDialog = referpanel.MyDialog(self.parentFrame, self)
        CreateDialog.ShowModal()        

        # enables patient-doctor interaction GUI window
        CallAfter(self.parentFrame.CreateReferPanel)
        

    def onBPNow(self, event): # wxGlade: MyPanel1.<event_handler>
        """ function when Now Button is clicked"""

        # enable or disable GUI widgets
        self.bpNow_Button.Enable(False)
        self.StartStop_Button.Enable(False)
        self.StartStop_Label.Enable(False)

        # call the getnow method of the BP rxsensor object
        # perform instantaneous BP DAQ
        self.myBP = rxsensor.BP(self)
        self.myBP.getnow()

        # enable or disable GUI widgets
        self.StartStop_Button.Enable(True)
        self.StartStop_Label.Enable(True)
        self.bpNow_Button.Enable(True)
        self.bpvalue_label.Enable(True)

    def updateSPO2Display(self, data):
        """ update the SPO2 Display whenever a new sample is acquired """
        self.spo2value_label.SetLabel(data)

    def updateBPMDisplay(self, data):
        """ update the PR Display whenever a new sample is acquired """
        self.bpmvalue_label.SetLabel(data)
        
    def updateBPDisplay(self, data):
        """ update the BP Display whenever a new sample is acquired """
        self.bpvalue_label.SetLabel(data)

    def startSaveThread (self):
        """ start saving and sending created EDF files """
        thread = makeEDF.SaveThread(self)
        thread.start()
        
    def startPlotThread (self):
        """ start plotting ecg samples"""
        self.ecgplotterlist.append(ecgplotter.PlotThread(self))
        for thread in self.ecgplotterlist:
            thread.start()

    def stopThreads(self):
        """ stop all active threads """
        
        print "Stopping all threads"

        while self.acquirelist:
            thread = self.acquirelist[0]
            thread.stop()
            self.acquirelist.remove(thread)

        while self.ecgplotterlist:
            thread = self.ecgplotterlist[0]
            thread.stop()
            self.ecgplotterlist.remove(thread)

        print "Threads stopped"

        CallAfter(self.parentFrame.DestroyReferPanel)
            
    def onCloseWindow(self, event):
        """ closes the rxpanel window """
        
        print "Main Window Closed"
        
        self.stopThreads()
        self.parentFrame.Destroy()

