
#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.3 on Fri Jan 23 20:57:44 2009

import wx
import time
import rxsensor
import edf
import makeEDF

# begin wxGlade: extracode
# end wxGlade



class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.StaticText_LifeLink = wx.StaticText(self, -1, "LifeLink\nCorscience PulseOx Module", style=wx.ALIGN_CENTRE)
        self.StaticText_SpO2Value = wx.StaticText(self, -1, "--", style=wx.ALIGN_CENTRE)
        self.StaticText_Percent = wx.StaticText(self, -1, "%", style=wx.ALIGN_CENTRE)
        self.Button_StartEnd = wx.Button(self, -1, "START")
        self.Button_Transmit = wx.Button(self, -1, "TRANSMIT")

        self.AcquireThread = []         # contains threads for data acquisition
        self.makeEDFThr = []            # contains threads for edf file generation
        self.BioSignals = []            # contains BioSignal objects 
        self.count = 0
        self.StartEndToggle = 0
        self.StartTime = ''

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.onClickStart, self.Button_StartEnd)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("LifeLink Halfway Demo")
        self.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.StaticText_LifeLink.SetMinSize((-1, -1))
        self.StaticText_LifeLink.SetBackgroundColour(wx.Colour(132, 181, 255))
        self.StaticText_LifeLink.SetForegroundColour(wx.Colour(0, 0, 0))
        self.StaticText_LifeLink.SetFont(wx.Font(20, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.StaticText_SpO2Value.SetBackgroundColour(wx.Colour(0, 255, 255))
        self.StaticText_SpO2Value.SetForegroundColour(wx.Colour(255, 0, 0))
        self.StaticText_SpO2Value.SetFont(wx.Font(26, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, "Tw Cen MT"))
        self.StaticText_Percent.SetBackgroundColour(wx.Colour(0, 255, 255))
        self.StaticText_Percent.SetFont(wx.Font(20, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "MS Shell Dlg 2"))
        self.Button_StartEnd.SetBackgroundColour(wx.Colour(216, 191, 216))
        self.Button_StartEnd.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.Button_Transmit.SetBackgroundColour(wx.Colour(216, 191, 216))
        self.Button_Transmit.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.Button_Transmit.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.StaticText_LifeLink, 1, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_3.Add(self.StaticText_SpO2Value, 1, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_3.Add(self.StaticText_Percent, 1, wx.ALL|wx.EXPAND|wx.ALIGN_BOTTOM, 4)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_4.Add(self.Button_StartEnd, 1, wx.ALL|wx.EXPAND, 4)
        sizer_4.Add(self.Button_Transmit, 1, wx.ALL|wx.EXPAND|wx.ALIGN_BOTTOM, 4)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def onClickStart(self, event): # wxGlade: MyFrame.<event_handler>

        self.Button_Transmit.Enable(True)              
        if self.StartEndToggle == 0:

            self.Button_StartEnd.SetLabel("Stop")
            self.StartEndToggle = 1
            
            self.AcquireThread.append(rxsensor.SPO2(self))
            for thread in self.AcquireThread:
                thread.start()

            self.StartTime = time.strftime("%H.%M.%S")

            self.makeEDFThr.append(makeEDF.makeEDFThr(self, self.StartTime))
            for thread in self.makeEDFThr:
                thread.start()

        elif self.StartEndToggle == 1:
            self.Button_StartEnd.SetLabel("Exit")
            
            for thread in self.AcquireThread:
                thread.stop()
            self.AcquireThread = []

            for thread in self.makeEDFThr:
                thread.stop()
            self.makeEDFThr = []

            self.StartEndToggle = 2
            
        else:
            self.Close()     

        
    def ContinueDAQ(self):

        for thread in self.AcquireThread:
            thread.stop()
        self.AcquireThread = []

        self.AcquireThread.append(rxsensor.SPO2(self))
        for thread in self.AcquireThread:
            thread.start()
            
    def UpdateSpO2Display(self,SpO2sample):
        
        self.StaticText_SpO2Value.SetLabel(SpO2sample)


# end of class MyFrame


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
