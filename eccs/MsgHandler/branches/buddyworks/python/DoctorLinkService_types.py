##################################################
# file: DoctorLinkService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/local/bin/wsdl2py --complexType ws.xml
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://web/
##############################

class ns0:
    targetNamespace = "http://web/"

    class dictionary_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://web/"
        type = (schema, "dictionary")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dictionary_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "dictionary_Holder"
            self.pyclass = Holder

    class hashtable_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://web/"
        type = (schema, "hashtable")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.hashtable_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.dictionary_Def not in ns0.hashtable_Def.__bases__:
                bases = list(ns0.hashtable_Def.__bases__)
                bases.insert(0, ns0.dictionary_Def)
                ns0.hashtable_Def.__bases__ = tuple(bases)

            ns0.dictionary_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class msg_is_sent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://web/"
        type = (schema, "msg_is_sent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.msg_is_sent_Def.schema
            TClist = [ZSI.TC.Boolean(pname="msg_sent", aname="_msg_sent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._msg_sent = None
                    return
            Holder.__name__ = "msg_is_sent_Holder"
            self.pyclass = Holder

    class msg_is_sentResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://web/"
        type = (schema, "msg_is_sentResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.msg_is_sentResponse_Def.schema
            TClist = [ZSI.TC.AnyType(pname="message", aname="_message", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = []
                    return
            Holder.__name__ = "msg_is_sentResponse_Holder"
            self.pyclass = Holder

    class push_msg_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://web/"
        type = (schema, "push_msg")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.push_msg_Def.schema
            TClist = [ZSI.TC.String(pname="contact", aname="_contact", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname="keys", aname="_keys", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname="values", aname="_values", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="text_content", aname="_text_content", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname="file_names", aname="_file_names", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname="file_contents", aname="_file_contents", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contact = None
                    self._keys = []
                    self._values = []
                    self._text_content = None
                    self._file_names = []
                    self._file_contents = []
                    return
            Holder.__name__ = "push_msg_Holder"
            self.pyclass = Holder

    class push_msgResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://web/"
        type = (schema, "push_msgResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.push_msgResponse_Def.schema
            TClist = [ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    return
            Holder.__name__ = "push_msgResponse_Holder"
            self.pyclass = Holder

    class msg_is_sent_Dec(ElementDeclaration):
        literal = "msg_is_sent"
        schema = "http://web/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://web/', u'msg_is_sent')
            kw["aname"] = "_msg_is_sent"
            if ns0.msg_is_sent_Def not in ns0.msg_is_sent_Dec.__bases__:
                bases = list(ns0.msg_is_sent_Dec.__bases__)
                bases.insert(0, ns0.msg_is_sent_Def)
                ns0.msg_is_sent_Dec.__bases__ = tuple(bases)

            ns0.msg_is_sent_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "msg_is_sent_Dec_Holder"

    class msg_is_sentResponse_Dec(ElementDeclaration):
        literal = "msg_is_sentResponse"
        schema = "http://web/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://web/', u'msg_is_sentResponse')
            kw["aname"] = "_msg_is_sentResponse"
            if ns0.msg_is_sentResponse_Def not in ns0.msg_is_sentResponse_Dec.__bases__:
                bases = list(ns0.msg_is_sentResponse_Dec.__bases__)
                bases.insert(0, ns0.msg_is_sentResponse_Def)
                ns0.msg_is_sentResponse_Dec.__bases__ = tuple(bases)

            ns0.msg_is_sentResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "msg_is_sentResponse_Dec_Holder"

    class push_msg_Dec(ElementDeclaration):
        literal = "push_msg"
        schema = "http://web/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://web/', u'push_msg')
            kw["aname"] = "_push_msg"
            if ns0.push_msg_Def not in ns0.push_msg_Dec.__bases__:
                bases = list(ns0.push_msg_Dec.__bases__)
                bases.insert(0, ns0.push_msg_Def)
                ns0.push_msg_Dec.__bases__ = tuple(bases)

            ns0.push_msg_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "push_msg_Dec_Holder"

    class push_msgResponse_Dec(ElementDeclaration):
        literal = "push_msgResponse"
        schema = "http://web/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = (u'http://web/', u'push_msgResponse')
            kw["aname"] = "_push_msgResponse"
            if ns0.push_msgResponse_Def not in ns0.push_msgResponse_Dec.__bases__:
                bases = list(ns0.push_msgResponse_Dec.__bases__)
                bases.insert(0, ns0.push_msgResponse_Def)
                ns0.push_msgResponse_Dec.__bases__ = tuple(bases)

            ns0.push_msgResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "push_msgResponse_Dec_Holder"

# end class ns0 (tns: http://web/)
