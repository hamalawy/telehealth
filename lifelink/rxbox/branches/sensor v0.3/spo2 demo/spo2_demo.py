"""
Project LifeLink: RxBox Stand-Alone SPO2 Sensor

Authors:    Bangoy, Mark Jan
            Sy, Luke Wicent
            Luis Sison, PhD
            ------------------------------------------------
            Instrumentation, Robotics and Control Laboratory
            University of the Philippines - Diliman
            ------------------------------------------------
            February 2010
"""






#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.3 on Tue Jan 19 09:34:28 2010

import wx
import edf
import datetime
from edf import BioSignal, EDF
# begin wxGlade: extracode
# end wxGlade

from SPO2 import SPO2

class SPO2_FRAME(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SPO2_FRAME.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.spo2_panel1 = wx.Panel(self, -1)
        self.heartrate_panel1 = wx.Panel(self, -1)
        self.START = wx.StaticText(self, -1, "START")
        self.START_BUTTON = wx.Button(self, -1, "")
        self.heartrate_label = wx.StaticText(self.heartrate_panel1, -1, "Heart Rate", style=wx.ALIGN_CENTRE)
        self.heartrate_infolabel = wx.StaticText(self.heartrate_panel1, -1, "--")
        self.bpmvalue_label = wx.StaticText(self.heartrate_panel1, -1, "--", style=wx.ALIGN_CENTRE)
        self.bpmrightpanel = wx.Panel(self.heartrate_panel1, -1)
        self.bpmunit_label = wx.StaticText(self.heartrate_panel1, -1, "bpm", style=wx.ALIGN_RIGHT)
        self.heartrate_staticline = wx.StaticLine(self.heartrate_panel1, -1, style=wx.LI_VERTICAL)
        self.spo2_label = wx.StaticText(self.spo2_panel1, -1, "Blood Oxygen Saturation", style=wx.ALIGN_CENTRE)
        self.spo2_infolabel = wx.StaticText(self.spo2_panel1, -1, "--")
        self.spo2value_label = wx.StaticText(self.spo2_panel1, -1, "--", style=wx.ALIGN_CENTRE)
        self.spo2rightpanel = wx.Panel(self.spo2_panel1, -1)
        self.spo2unit_label = wx.StaticText(self.spo2_panel1, -1, "%SpO2", style=wx.ALIGN_RIGHT)
        self.panel_1 = wx.Panel(self, -1)
        self.label_1 = wx.StaticText(self, -1, "PULSE OXIMETER STATUS")
        self.text_ctrl_1 = wx.TextCtrl(self, -1, "CHECKING STATUS", style=wx.TE_READONLY)

        self.__set_properties()
        self.__do_layout()
        
        self.timer1=wx.Timer(self)
        self.timerEDF = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.spo2_timer1, self.timer1)
        self.Bind(wx.EVT_TIMER, self.make_edf, self.timerEDF)
        self.Bind(wx.EVT_BUTTON, self.ONSTARTSTOP, self.START_BUTTON)      
        self.spo2=SPO2(self,port='/dev/ttyUSB0') #set port 
        
        #for edf creation:patient information
        self.patient1 = edf.Patient('1','Timothy','Cena','Ebido','Servan',\
                                    'Male','09.27.89','19')
        self.spo2_list=[]
        self.bpm_list=[]
        self.Biosignals = []
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: SPO2_FRAME.__set_properties
        self.SetTitle("SPO2_FOR_LINUX")
        self.SetBackgroundColour(wx.Colour(226, 255, 180))
        self.START.SetBackgroundColour(wx.Colour(226, 255, 180))
        self.START.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.START_BUTTON.SetBackgroundColour(wx.Colour(219, 112, 147))
        self.heartrate_label.SetBackgroundColour(wx.Colour(226, 255, 180))
        self.heartrate_label.SetFont(wx.Font(9, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.heartrate_infolabel.SetBackgroundColour(wx.Colour(226, 255, 180))
        self.heartrate_infolabel.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.bpmvalue_label.SetBackgroundColour(wx.Colour(226, 255, 180))
        self.bpmvalue_label.SetFont(wx.Font(30, wx.MODERN, wx.NORMAL, wx.BOLD, 0, "Arial"))
        self.bpmrightpanel.SetBackgroundColour(wx.Colour(226, 255, 180))
        self.bpmunit_label.SetBackgroundColour(wx.Colour(226, 255, 180))
        self.bpmunit_label.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, 0, "Arial"))
        self.heartrate_panel1.SetBackgroundColour(wx.Colour(226, 255, 180))
        self.spo2_label.SetBackgroundColour(wx.Colour(226, 255, 180))
        self.spo2_label.SetFont(wx.Font(9, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.spo2_infolabel.SetBackgroundColour(wx.Colour(226, 255, 180))
        self.spo2_infolabel.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.spo2value_label.SetBackgroundColour(wx.Colour(226, 255, 180))
        self.spo2value_label.SetFont(wx.Font(30, wx.MODERN, wx.NORMAL, wx.BOLD, 0, "Arial"))
        self.spo2rightpanel.SetBackgroundColour(wx.Colour(226, 255, 180))
        self.spo2unit_label.SetBackgroundColour(wx.Colour(226, 255, 180))
        self.spo2unit_label.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, 0, "Arial"))
        self.spo2_panel1.SetBackgroundColour(wx.Colour(226, 255, 180))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: SPO2_FRAME.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        biomodule_horizontal_sizer = wx.BoxSizer(wx.HORIZONTAL)
        spo2_sizer = wx.BoxSizer(wx.VERTICAL)
        spo2labelsizer = wx.BoxSizer(wx.HORIZONTAL)
        spo2_label_sizer = wx.BoxSizer(wx.HORIZONTAL)
        heartrate_panel1_sizer = wx.BoxSizer(wx.HORIZONTAL)
        heartrate_sizer = wx.BoxSizer(wx.VERTICAL)
        bpmlabelsizer = wx.BoxSizer(wx.HORIZONTAL)
        heartrate_label_sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(self.START, 0, wx.ALL|wx.EXPAND, 3)
        sizer_3.Add(self.START_BUTTON, 1, wx.ALL|wx.EXPAND, 1)
        biomodule_horizontal_sizer.Add(sizer_3, 1, wx.EXPAND, 0)
        heartrate_label_sizer.Add(self.heartrate_label, 2, wx.BOTTOM|wx.EXPAND, 1)
        heartrate_label_sizer.Add(self.heartrate_infolabel, 3, wx.BOTTOM|wx.EXPAND, 1)
        heartrate_sizer.Add(heartrate_label_sizer, 0, wx.EXPAND, 0)
        bpmlabelsizer.Add(self.bpmvalue_label, 0, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        bpmlabelsizer.Add(self.bpmrightpanel, 1, wx.EXPAND, 0)
        heartrate_sizer.Add(bpmlabelsizer, 1, wx.EXPAND, 0)
        heartrate_sizer.Add(self.bpmunit_label, 0, wx.ALIGN_RIGHT, 0)
        heartrate_panel1_sizer.Add(heartrate_sizer, 1, wx.EXPAND, 0)
        heartrate_panel1_sizer.Add(self.heartrate_staticline, 0, wx.EXPAND, 0)
        self.heartrate_panel1.SetSizer(heartrate_panel1_sizer)
        biomodule_horizontal_sizer.Add(self.heartrate_panel1, 2, wx.EXPAND, 0)
        spo2_label_sizer.Add(self.spo2_label, 2, wx.BOTTOM|wx.EXPAND, 1)
        spo2_label_sizer.Add(self.spo2_infolabel, 3, wx.BOTTOM|wx.EXPAND, 1)
        spo2_sizer.Add(spo2_label_sizer, 0, wx.EXPAND, 0)
        spo2labelsizer.Add(self.spo2value_label, 0, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        spo2labelsizer.Add(self.spo2rightpanel, 1, wx.EXPAND, 0)
        spo2_sizer.Add(spo2labelsizer, 1, wx.EXPAND, 0)
        spo2_sizer.Add(self.spo2unit_label, 0, wx.ALIGN_RIGHT, 0)
        self.spo2_panel1.SetSizer(spo2_sizer)
        biomodule_horizontal_sizer.Add(self.spo2_panel1, 2, wx.EXPAND, 0)
        sizer_2.Add(biomodule_horizontal_sizer, 1, wx.EXPAND, 0)
        sizer_4.Add(self.panel_1, 3, 0, 0)
        sizer_4.Add(self.label_1, 0, 0, 0)
        sizer_4.Add(self.text_ctrl_1, 0, 0, 0)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def ONSTARTSTOP(self, event): # wxGlade: SPO2_FRAME.<event_handler>
    """
		Start acquiring reading on press of start
    """
        if self.START.GetLabel()=="Start":
            self.START.SetLabel("Stop")
            self.timer1.Start(1000)# acquire data every 1000ms
            self.timerEDF.Start(15000)# create edf every 15s
 #           self.timerEDF.Start(15000)
        else:
            self.START.SetLabel("Start")
            self.timer1.Stop()
#            self.timerEDF.Stop()

    def spo2_timer1(self,evt):
        self.spo2.get()
        self.spo2_list.append(self.spo2.current_spo2)
        self.bpm_list.append(self.spo2.current_bpm)
        
    def make_edf(self,evt):

        self.Endtime = datetime.datetime.today()
        self.Starttime = self.Endtime + datetime.timedelta(seconds = -15)
        self.strDate = self.Starttime.strftime("%d.%m.%y")
        self.strStarttime = self.Starttime.strftime("%H.%M.%S")
        self.strY2KDate = self.Starttime.strftime("%d-%b-%Y")
        print 'spo2 bef:'+str(len(self.spo2_list))
        nDataRecord = 3
        
		#appending missing spo2 data to complete the 15 samples
        if len(self.spo2_list)<15:
            x=15-len(self.spo2_list)
            spo2latest=self.spo2_list[-1]
            for i in range(x):
               self.spo2_list.append(spo2latest)
        print 'spo2 after:'+str(len(self.spo2_list))+'\n'
        print 'BPM before:'+str(len(self.bpm_list))
      
		#appending missing bpm data to complete the 15 samples
        if len(self.bpm_list)<15:
            x=15-len(self.bpm_list)
            bpmlatest=self.bpm_list[-1]
            for i in range(x):
               self.bpm_list.append(bpmlatest)
        print 'BPM after:'+str(len(self.bpm_list))
        
        Biosignal_SPO2 = BioSignal('SpO2 finger','IR-Red sensor',\
                                '%',0,101,0,101,'None',15,self.spo2_list)
        Biosignal_BPM = BioSignal('SpO2 finger','IR-Red sensor',\
                                'bpm',0,300,0,300,'None',15,self.bpm_list)
        print self.spo2_list
        print self.bpm_list
        self.spo2_list = []
        self.bpm_list = []
        self.Biosignals.append(Biosignal_SPO2)
        self.Biosignals.append(Biosignal_BPM) 
        
       
        myedf = edf.EDF(self.patient1,self.Biosignals,self.strDate,self.strStarttime,self.strY2KDate + \
                        ': LifeLink 15 second data of CorScience modules', \
                        nDataRecord, 15)
        myedf.get(self.patient1)
        print '\n\n\nEDF creation finished\n\n\n'

        self.Biosignals = []


        

# end of class SPO2_FRAME



if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = SPO2_FRAME(None, -1, "")
    app.SetTopWindow(frame_1)

    frame_1.Show()
    app.MainLoop()
